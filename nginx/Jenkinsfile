pipeline {
    agent any
    stages('Verify Docker') {
    steps {
        script {
            // 1. 检查工具是否可用
            def dockerTool = tool name: 'docker', type: 'org.jenkinsci.plugins.docker.workflow.DockerTool'
            echo "Docker tool path: ${dockerTool}"
            
            // 2. 将 Docker 添加到 PATH
            env.PATH = "${dockerTool}/bin:${env.PATH}"
            
            // 3. 执行验证命令
            sh '''
                echo "=== Docker 安装验证 ==="
                
                # 检查可执行文件是否存在
                ls -l ${DOCKER_TOOL_PATH}/docker
                
                # 验证版本
                docker --version
                
                # 检查基本功能
                echo 'FROM alpine:latest\nRUN echo "Hello Docker!"' > Dockerfile.test
                docker build -t test-image -f Dockerfile.test .
                docker run --rm test-image
                
                # 清理临时文件
                rm Dockerfile.test
                docker rmi test-image
            '''
        }
    }
}
    environment {
        REGISTRY = 'docker.io'
        IMAGE_NAME = 'freewenxiao/nginx-test'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        FULL_IMAGE = "${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}"
        GIT_REPO = 'https://github.com/freewenxiao/yexiangfeng.git'
    }
    
    stages {
        stage('Clone Repository') {
            steps {
                checkout scm
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    // 使用 Docker Pipeline 插件构建
                    dockerImage = docker.build(FULL_IMAGE)
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                script {
                    // 关键修复：使用正确的注册表 URL
                    docker.withRegistry("https://${REGISTRY}", 'cbc0d5e2-33f3-4ef9-8fff-05432f02dfaa') {
                        dockerImage.push()
                    }
                }
            }
        }
        
        stage('Update Deployment Config') {
            steps {
                script {
                    // 安全地处理 Git 操作
                    withCredentials([
                        usernamePassword(
                            credentialsId: 'b03f9ac5-8f56-439b-a32a-6837b400ade5',
                            usernameVariable: 'GIT_USER',
                            passwordVariable: 'GIT_PASSWORD'
                        )
                    ]) {
                        dir('yexiangfeng') {
                            // 克隆仓库
                            sh """
                                git clone https://${GIT_USER}:${GIT_PASSWORD}@${GIT_REPO.split('://')[1]} .
                            """
                            
                            // 更新部署文件
                            sh "sed -i 's|image:.*|image: ${FULL_IMAGE}|' deployment.yaml"
                            
                            // 提交更改
                            sh """
                                git config user.email "jenkins@example.com"
                                git config user.name "Jenkins"
                                git add deployment.yaml
                                git commit -m 'Update image to ${IMAGE_TAG}'
                                git push
                            """
                        }
                    }
                }
            }
        }
    }
}
    
