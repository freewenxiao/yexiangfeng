pipeline {
    agent {
        kubernetes {
            label 'docker-agent'
            // 增加 Pod 启动超时时间（默认5分钟，这里设为10分钟）
            instanceCap 5
            idleMinutes 10
            // 增加 Pod 启动重试
            retries 2
            
            yaml """
apiVersion: v1
kind: Pod
metadata:
  # 添加状态注解，帮助 Jenkins 检测状态
  annotations:
    jenkins.io/pod-status: ''
spec:
  containers:
  - name: jnlp
    image: jenkins/inbound-agent:latest-jdk11
    resources:
      requests:
        memory: "512Mi"  # 增加内存请求
        cpu: "200m"      # 增加 CPU 请求
      limits:
        memory: "1Gi"
        cpu: "800m"
    # 添加就绪探针
    readinessProbe:
      exec:
        command: ["ls", "/var/jenkins/agent"]
      initialDelaySeconds: 5
      periodSeconds: 5
  - name: docker
    image: docker:20.10-dind  # 使用 dind 镜像
    command: ["dockerd", "--host=tcp://0.0.0.0:2375"]
    securityContext:
      privileged: true
    env:
      - name: DOCKER_TLS_CERTDIR
        value: ""
    # 添加就绪探针
    readinessProbe:
      exec:
        command: ["docker", "version"]
      initialDelaySeconds: 10
      periodSeconds: 5
  volumes:
  - name: docker-sock
    hostPath:
      path: /var/run/docker.sock
  - name: docker-bin
    hostPath:
      path: /usr/bin/docker
"""
        }
    }
    
    environment {
        REGISTRY = 'docker.io'
        IMAGE_NAME = 'nginx-test'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        DEPLOY_REPO = 'https://github.com/freewenxiao/yexiangfeng.git'
    }
    
    stages {
        stage('Clone Source') {
            steps {
                checkout scm
            }
        }
        
        stage('Build & Push Image') {
            steps {
                container('docker') {
                    script {
                        // 检查 Docker 是否真正可用
                        retry(3) {
                            sh 'docker version || (sleep 10; false)'
                        }
                        
                        withCredentials([
                            usernamePassword(
                                credentialsId: 'cbc0d5e2-33f3-4ef9-8fff-05432f02dfaa',
                                usernameVariable: 'DOCKER_USER',
                                passwordVariable: 'DOCKER_PASS'
                            )
                        ]) {
                            // 登录 Docker Hub
                            sh "docker login -u ${DOCKER_USER} -p ${DOCKER_PASS} ${REGISTRY}"
                            
                            // 构建并推送镜像
                            def fullImage = "${DOCKER_USER}/${IMAGE_NAME}:${IMAGE_TAG}"
                            sh "docker build -t ${fullImage} ."
                            sh "docker push ${fullImage}"
                        }
                    }
                }
            }
        }
        
        stage('Update Deployment') {
            steps {
                script {
                    dir('deployment-config') {
                        // 检出部署配置仓库
                        checkout([
                            $class: 'GitSCM',
                            branches: [[name: '*/main']],
                            extensions: [[$class: 'CleanBeforeCheckout']],
                            userRemoteConfigs: [[
                                url: DEPLOY_REPO,
                                credentialsId: 'b03f9ac5-8f56-439b-a32a-6837b400ade5'
                            ]]
                        ])
                        
                        // 更新镜像版本
                        withCredentials([
                            usernamePassword(
                                credentialsId: 'cbc0d5e2-33f3-4ef9-8fff-05432f02dfaa',
                                usernameVariable: 'DOCKER_USER',
                                passwordVariable: 'DOCKER_PASS'
                            )
                        ]) {
                            def fullImage = "${DOCKER_USER}/${IMAGE_NAME}:${IMAGE_TAG}"
                            sh "sed -i.bak 's|image:.*|image: ${fullImage}|' deployment.yaml"
                        }
                        
                        // 提交变更
                        sshagent(['b03f9ac5-8f56-439b-a32a-6837b400ade5']) {
                            sh """
                                git config user.email "jenkins@example.com"
                                git config user.name "Jenkins"
                                git add deployment.yaml
                                git commit -m 'Update image to ${IMAGE_TAG}'
                                git push origin main
                            """
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            container('docker') {
                script {
                    // 清理 Docker 登录凭证
                    sh 'docker logout ${REGISTRY} || true'
                    
                    // 清理工作空间
                    deleteDir()
                }
            }
        }
        
        failure {
            script {
                // 获取 Pod 状态用于调试
                sh 'kubectl get pods -o wide || true'
                sh 'kubectl describe pods | grep -A 20 Events || true'
            }
        }
    }
}
