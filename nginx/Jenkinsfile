pipeline {
    agent any
    
    environment {
        REGISTRY = 'docker.io'
        IMAGE_NAME = 'nginx-test'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
    }
    
    stages {
        stage('Clone Repository') {
            steps {
                checkout scm
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    // 确保 Docker 可用
                    sh 'which docker || echo "Docker not found"'
                    sh 'docker --version || true'
                    
                    withCredentials([usernamePassword(
                        credentialsId: 'cbc0d5e2-33f3-4ef9-8fff-05432f02dfaa',
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_PASS'
                    )]) {
                        // 使用完整的镜像名称
                        def fullImageName = "${DOCKER_USER}/${IMAGE_NAME}:${IMAGE_TAG}"
                        
                        // 使用 docker.build 方法
                        dockerImage = docker.build(fullImageName)
                    }
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(
                        credentialsId: 'cbc0d5e2-33f3-4ef9-8fff-05432f02dfaa',
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_PASS'
                    )]) {
                        def fullImageName = "${DOCKER_USER}/${IMAGE_NAME}:${IMAGE_TAG}"
                        
                        // 使用明确的 Docker 命令路径
                        sh """
                            /usr/bin/docker login -u ${DOCKER_USER} -p ${DOCKER_PASS} ${REGISTRY}
                            /usr/bin/docker push ${fullImageName}
                        """
                        
                        // 使用 docker.withRegistry 方法
                        docker.withRegistry("https://${REGISTRY}", "credentials-id:cbc0d5e2-33f3-4ef9-8fff-05432f02dfaa") {
                            dockerImage.push()
                        }
                    }
                }
            }
        }
        
        stage('Update Deployment Config') {
            steps {
                script {
                    dir('config-repo') {
                        checkout([
                            $class: 'GitSCM',
                            branches: [[name: '*/main']],
                            userRemoteConfigs: [[
                                url: 'https://github.com/freewenxiao/yexiangfeng.git',
                                credentialsId: 'b03f9ac5-8f56-439b-a32a-6837b400ade5'
                            ]]
                        ])
                        
                        withCredentials([usernamePassword(
                            credentialsId: 'cbc0d5e2-33f3-4ef9-8fff-05432f02dfaa',
                            usernameVariable: 'DOCKER_USER',
                            passwordVariable: 'DOCKER_PASS'
                        )]) {
                            def fullImageName = "${DOCKER_USER}/${IMAGE_NAME}:${IMAGE_TAG}"
                            sh "sed -i 's|image:.*|image: ${fullImageName}|' deployment.yaml"
                        }
                        
                        sh 'git config user.email "jenkins@example.com"'
                        sh 'git config user.name "Jenkins CI"'
                        sh 'git add deployment.yaml'
                        sh "git commit -m 'Update image tag to ${IMAGE_TAG}'"
                        
                        // 安全推送
                        sshagent(['b03f9ac5-8f56-439b-a32a-6837b400ade5']) {
                            sh 'git push origin main'
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                // 安全登出 Docker
                sh '''
                    if command -v docker &> /dev/null; then
                        docker logout ${REGISTRY} || true
                    else
                        echo "Docker command not found, skipping logout"
                    fi
                '''
                
                // 使用 deleteDir 替代 cleanWs
                deleteDir()
            }
        }
    }
}
