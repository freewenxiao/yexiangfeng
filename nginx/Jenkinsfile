pipeline {
    agent {
        kubernetes {
            label 'docker-agent'
            yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: jnlp
    image: jenkins/inbound-agent:latest-jdk17
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "500m"
  - name: docker
    image: docker:latest
    command: ["cat"]
    tty: true
    securityContext:
      privileged: true
    volumeMounts:
      - name: docker-sock
        mountPath: /var/run/docker.sock
      - name: docker-bin
        mountPath: /usr/bin/docker
  volumes:
  - name: docker-sock
    hostPath:
      path: /var/run/docker.sock
  - name: docker-bin
    hostPath:
      path: /usr/bin/docker
"""
        }
    }
    
    environment {
        REGISTRY = 'docker.io'
        IMAGE_NAME = 'nginx-test'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
    }
    
    stages {
        stage('Clone Source') {
            steps {
                checkout scm
            }
        }
        
        stage('Build & Push Image') {
            steps {
                container('docker') {
                    script {
                        withCredentials([
                            usernamePassword(
                                credentialsId: 'cbc0d5e2-33f3-4ef9-8fff-05432f02dfaa',
                                usernameVariable: 'DOCKER_USER',
                                passwordVariable: 'DOCKER_PASS'
                            )
                        ]) {
                            // 登录 Docker Hub
                            sh "docker login -u ${DOCKER_USER} -p ${DOCKER_PASS} ${REGISTRY}"
                            
                            // 构建并推送镜像
                            def fullImage = "${DOCKER_USER}/${IMAGE_NAME}:${IMAGE_TAG}"
                            sh "docker build --build-arg ${REGISTRY} -f ./nginx/Dockerfile -t ${fullImage} ."
                            sh "docker push ${fullImage}"
                        }
                    }
                }
            }
        }
        
        stage('Update Deployment') {
            steps {
                script {
                    dir('deployment-config') {                    
                        // 提交并推送变更
                       withCredentials([
                           usernamePassword(
                               credentialsId: 'b03f9ac5-8f56-439b-a32a-6837b400ade5',
                               usernameVariable: 'GIT_USER',
                               passwordVariable: 'GIT_PASS'
                           )
                     ]) {
                           def gitRepoUrl = 'https://github.com/freewenxiao/yexiangfeng.git'
                           def secureRepoUrl = "https://${GIT_USER}:${GIT_PASS}@github.com/freewenxiao/yexiangfeng.git"
                           def fullImage = "freewenxiao/${IMAGE_NAME}:${IMAGE_TAG}"
                    
                           sh """
                              git clone -b main ${gitRepoUrl} repo
                              cd repo
                              sh "sed -i \"s/image:.*/image: \${fullImage}/g\" ./nginx/manifests/deployment.yaml"
                            
                              git status
                              git add .
                              git commit -m 'Update image to ${IMAGE_TAG}'
                              git push ${secureRepoUrl} main
                              git log -1
                           """
                    }
                }
            }
        }
    }
 }       
    
    post {
        always {
            container('docker') {
                script {
                    // 清理 Docker 登录凭证
                    sh 'docker logout ${REGISTRY} || true'
                    
                    // 清理工作空间
                    deleteDir()
                }
            }
        }
        
        success {
            echo 'Pipeline completed successfully!'
        }
        
        failure {
            echo 'Pipeline failed! Check logs for details.'
        }
    }
}
